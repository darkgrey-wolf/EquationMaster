/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package emFrames;

import customComponents.*;
import coreLogic.*;
import customExceptions.*;
import java.awt.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

/**
 *
 * @author Retaliation
 */
public class frameMain extends javax.swing.JFrame{

    /**
     * Creates new form frameMain
     */
    public frameMain() {
        TEXTS = ResourceBundle.getBundle("bundleStrings");
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        panelInput = new javax.swing.JPanel();
        panelInputConditions = new javax.swing.JPanel();
        labelAction2 = new javax.swing.JLabel();
        textFieldDimensions = new javax.swing.JTextField();
        labelActions = new javax.swing.JLabel();
        cmbBoxActions = new javax.swing.JComboBox();
        buttonGo = new javax.swing.JButton();
        buttonSolve = new javax.swing.JButton();
        cmbBoxTypeSelect = new javax.swing.JComboBox();
        scrPaneInput = new javax.swing.JScrollPane();
        panelSolution = new javax.swing.JPanel();
        scrPaneOutput = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("bundleStrings"); // NOI18N
        setTitle(bundle.getString("strMainTitle")); // NOI18N
        setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N

        panelMain.setBackground(new java.awt.Color(0, 153, 153));
        panelMain.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        tabbedPane.setForeground(new java.awt.Color(0, 51, 102));
        tabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabbedPane.setFocusable(false);

        panelInput.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        panelInputConditions.setBackground(new java.awt.Color(0, 204, 153));
        panelInputConditions.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelInputConditions.setFont(new java.awt.Font("Verdana", 1, 10)); // NOI18N

        labelAction2.setFont(panelInputConditions.getFont());
        labelAction2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelAction2.setText(bundle.getString("strLabelUnknowns")); // NOI18N

        textFieldDimensions.setBackground(new java.awt.Color(204, 255, 153));
        textFieldDimensions.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textFieldDimensions.setText("3");
        textFieldDimensions.setToolTipText(bundle.getString("strUnknownTooltip")); // NOI18N
        textFieldDimensions.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        labelActions.setFont(panelInputConditions.getFont());
        labelActions.setText(bundle.getString("strLabelComboBox")); // NOI18N

        cmbBoxActions.setBackground(new java.awt.Color(204, 255, 153));
        cmbBoxActions.setFont(panelInputConditions.getFont());
        cmbBoxActions.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Equation Solution", "Matrix Determinant", "Matrix Addition", "Matrix Subtraction", "Scalar Multiplication", "Matrix Multiplication", "Transpose Matrix" }));
        cmbBoxActions.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbBoxActions.setFocusable(false);
        cmbBoxActions.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbBoxActionsItemStateChanged(evt);
            }
        });

        buttonGo.setFont(panelInputConditions.getFont());
        buttonGo.setText(bundle.getString("strButtonGo")); // NOI18N
        buttonGo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonGo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonGo.setFocusable(false);
        buttonGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionGo(evt);
            }
        });

        buttonSolve.setFont(panelInputConditions.getFont());
        buttonSolve.setText(bundle.getString("strButtonSolve")); // NOI18N
        buttonSolve.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        buttonSolve.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSolve.setEnabled(false);
        buttonSolve.setFocusable(false);
        buttonSolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSolveActionPerformed(evt);
            }
        });

        cmbBoxTypeSelect.setBackground(new java.awt.Color(204, 255, 153));
        cmbBoxTypeSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Real" }));
        cmbBoxTypeSelect.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cmbBoxTypeSelect.setFocusable(false);
        cmbBoxTypeSelect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbBoxTypeSelectItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout panelInputConditionsLayout = new javax.swing.GroupLayout(panelInputConditions);
        panelInputConditions.setLayout(panelInputConditionsLayout);
        panelInputConditionsLayout.setHorizontalGroup(
            panelInputConditionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInputConditionsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelActions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbBoxActions, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(labelAction2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(textFieldDimensions, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(cmbBoxTypeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonGo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonSolve, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelInputConditionsLayout.setVerticalGroup(
            panelInputConditionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInputConditionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInputConditionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelInputConditionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonGo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSolve, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelInputConditionsLayout.createSequentialGroup()
                        .addGroup(panelInputConditionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAction2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(textFieldDimensions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbBoxTypeSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2))
                    .addGroup(panelInputConditionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelActions)
                        .addComponent(cmbBoxActions)))
                .addContainerGap())
        );

        textFieldDimensions.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout panelInputLayout = new javax.swing.GroupLayout(panelInput);
        panelInput.setLayout(panelInputLayout);
        panelInputLayout.setHorizontalGroup(
            panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelInputConditions, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(scrPaneInput, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        panelInputLayout.setVerticalGroup(
            panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInputLayout.createSequentialGroup()
                .addComponent(panelInputConditions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrPaneInput, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE))
        );

        tabbedPane.addTab(bundle.getString("strTabInput"), panelInput); // NOI18N

        javax.swing.GroupLayout panelSolutionLayout = new javax.swing.GroupLayout(panelSolution);
        panelSolution.setLayout(panelSolutionLayout);
        panelSolutionLayout.setHorizontalGroup(
            panelSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 1022, Short.MAX_VALUE)
        );
        panelSolutionLayout.setVerticalGroup(
            panelSolutionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrPaneOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
        );

        tabbedPane.addTab(bundle.getString("strTabSolution"), panelSolution); // NOI18N

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        tabbedPane.getAccessibleContext().setAccessibleDescription("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonActionGo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionGo
        // TODO add your handling code here:
        //Check ComboBox
        inputs1 = new ArrayList<>();
        inputs2 = new ArrayList<>();
        String typeStr = (String) cmbBoxTypeSelect.getSelectedItem();
        selectType(typeStr);
        action = (String) cmbBoxActions.getSelectedItem();
        //Call Appropriate Routine
        switch (action) {
            case "Equation Solution": routineEqSoln(); break;
            case "Matrix Determinant": routineSquareDim();break;
            case "Matrix Addition": routineDuplicateDim("+");break;
            case "Matrix Subtraction": routineDuplicateDim("-"); break;
            case "Scalar Multiplication": routineSclDim(); break;
            case "Matrix Multiplication": routineDoubleDim("X"); break;
            case "Transpose Matrix": routineSingleDim();break;
            default:
                //show dialog
                diagNs();
                break;
        }
        System.gc();
    }//GEN-LAST:event_buttonActionGo
    //Routine Functions
    private void routineEqSoln(){
            Filters f = new Filters();
            if(f.strIntegerPositive(textFieldDimensions.getText())){
              intUnknowns = new Integer(textFieldDimensions.getText());
              PanelSpace ps = new PanelSpace();
              NumField temp;
              for(int k=0;k<intUnknowns;k++){
                  for(int l=0;l<intUnknowns+1;l++){
                      temp = new NumField(type);
                      if(l==intUnknowns) {
                          temp.setBackground(new Color(75,175,105));
                      }
                      temp.saveBgk();
                      ps.setCmp(temp,l,k);
                      inputs1.add(temp);
                  }
              }
              
              scrPaneInput.setViewportView(ps);
              scrPaneInput.repaint();
              buttonSolve.setEnabled(true);
          }
          else {
                diag(TEXTS.getString("strLabelErrorDim"));
          }
    }
    private void routineSquareDim(){
        Filters f = new Filters();
        String strFeed = textFieldDimensions.getText();
        if(f.strIntegerPositive(strFeed)){
            dim = new Integer(strFeed);
            PanelSpace ps = new PanelSpace();
            NumField temp;
            for(int k=0;k<dim;k++){
                for(int l=0;l<dim;l++){
                    temp = new NumField(type);
                    temp.saveBgk();
                    ps.setCmp(temp, l, k);
                    inputs1.add(temp);
                }
            }
            scrPaneInput.setViewportView(ps);
            scrPaneInput.repaint();
            buttonSolve.setEnabled(true);
        }
        else{
            //diagNs(TEXTS.getString("strLabelErrorDim"));
            diag(TEXTS.getString("strLabelErrorDim"));
        }
    }
    private void routineSingleDim(){
        String strFeed = (textFieldDimensions.getText()).trim();
        Filters f = new Filters();
        if(f.dimSingleCheck(strFeed)){ 
          dims = f.parseDimSingle(strFeed);
          PanelSpace ps = new PanelSpace();
          NumField temp;
          for(int k=0;k<dims[0];k++){
              for(int l=0;l<dims[1];l++){
                  temp = new NumField(type);
                  temp.saveBgk();
                  ps.setCmp(temp,l,k);
                  inputs1.add(temp);
              }
          }
          scrPaneInput.setViewportView(ps);
          scrPaneInput.repaint();
          buttonSolve.setEnabled(true);
        }
        else{
            diag(TEXTS.getString("strLabelErrorDim"));
        }
    }
    private void routineSclDim(){
        String strFeed = textFieldDimensions.getText(); //Problem: white spaces
        Filters f = new Filters();
        //strFeed = f.removeWhiteSpace(strFeed);
        
        if(f.dimSingleCheck(strFeed)){
            dims=f.parseDimSingle(strFeed);
            PanelSpace ps = new PanelSpace();
            NumField temp;
            temp = new NumField(type);
            temp.saveBgk();
            ps.setCmp(temp, 0,0,dims[1],dims[0]);
            inputs2.add(temp);
            JLabel jl;
            for(int k=0;k<dims[1];k++){
                jl = new JLabel("      ");
                if(k==0) jl.setText("    X ");
                ps.setCmp(jl, dims[1]+1, k+1);
            }
            for(int k=0;k<dims[0];k++){
                for(int l=0;l<dims[1];l++){
                    temp = new NumField(type);
                    temp.saveBgk();
                    ps.setCmp(temp, l+dims[1]+2 ,k);
                    inputs1.add(temp);
                }
            }
          scrPaneInput.setViewportView(ps);
          scrPaneInput.repaint();
          buttonSolve.setEnabled(true);
        }
        else {
            diag(TEXTS.getString("strLabelErrorDim"));
        }
    }
    private void routineDuplicateDim(String label){
        String strFeed = textFieldDimensions.getText(); //Problem: white spaces
        Filters f = new Filters();
        //strFeed = f.removeWhiteSpace(strFeed);
        
        if(f.dimSingleCheck(strFeed)){
            dims=f.parseDimSingle(strFeed);
            PanelSpace ps = new PanelSpace();
            NumField temp;
            for(int k=0;k<dims[0];k++){
                for(int l=0;l<dims[1];l++){
                    temp = new NumField(type);
                    temp.saveBgk();
                    ps.setCmp(temp, l, k);
                    inputs1.add(temp);
                }
            }
            JLabel jl;
            for(int k=0;k<dims[1];k++){
                jl = new JLabel("      ");
                if(k==0) jl.setText("    "+label+" ");
                ps.setCmp(jl, dims[1]+1, k);
            }
            for(int k=0;k<dims[0];k++){
                for(int l=0;l<dims[1];l++){
                    temp = new NumField(type);
                    temp.saveBgk();
                    ps.setCmp(temp, l+dims[1]+2 , k);
                    inputs2.add(temp);
                }
            }
          scrPaneInput.setViewportView(ps);
          scrPaneInput.repaint();
          buttonSolve.setEnabled(true);
        }
        else {
            diag(TEXTS.getString("strLabelErrorDim"));
        }
    }
    private void routineDoubleDim(String label){
        String strFeed = textFieldDimensions.getText();
        Filters f = new Filters();
        strFeed = f.removeWhiteSpace(strFeed);
        if(f.dimDoubleCheck(strFeed)){
            dims=f.parseDimDouble(strFeed);
            PanelSpace ps = new PanelSpace();
            NumField temp;
            for(int k=0;k<dims[0];k++){
                for(int l=0;l<dims[1];l++){
                    temp = new NumField(type);
                    temp.saveBgk();
                    ps.setCmp(temp, l, k);
                    inputs1.add(temp);
                }
            }
            JLabel jl;
            for(int k=0;k<dims[3]|k<dims[1];k++){
                jl = new JLabel("      ");
                if(k==0) jl.setText("    "+label+" ");
                ps.setCmp(jl, dims[1]+1, k);
            }
            for(int k=0;k<dims[2];k++){
                for(int l=0;l<dims[3];l++){
                    temp = new NumField(type);
                    temp.saveBgk();
                    ps.setCmp(temp, l+dims[1]+2 , k);
                    inputs2.add(temp);
                }
            }
          scrPaneInput.setViewportView(ps);
          scrPaneInput.repaint();
          buttonSolve.setEnabled(true);
        }
        else {
            diag(TEXTS.getString("strLabelErrorDim"));
        }
    }
    
    private void cmbBoxActionsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbBoxActionsItemStateChanged
        // TODO add your handling code here:
        String cmbAction = (String) cmbBoxActions.getSelectedItem();
        buttonSolve.setEnabled(false);
        //java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("bundleStrings");
        if(cmbAction.equals("Equation Solution")){
            labelAction2.setText(TEXTS.getString("strLabelUnknowns"));
            textFieldDimensions.setText(TEXTS.getString("strTextField3"));
            textFieldDimensions.setToolTipText(TEXTS.getString("strUnknownTooltip"));
        }
        else if(cmbAction.equals("Matrix Determinant")){
            labelAction2.setText(TEXTS.getString("strLabelMt1"));
            textFieldDimensions.setText(TEXTS.getString("strTextField3"));
            textFieldDimensions.setToolTipText(TEXTS.getString("strTooltip3"));
        }
        else if(cmbAction.equals("Transpose Matrix")|cmbAction.equals("Scalar Multiplication")){
            labelAction2.setText(TEXTS.getString("strLabelMt1"));
            textFieldDimensions.setText(TEXTS.getString("strTextField1"));
            textFieldDimensions.setToolTipText(TEXTS.getString("strTooltip1"));
        }
        else if(cmbAction.equals("Matrix Addition")|cmbAction.equals("Matrix Subtraction")){
            labelAction2.setText(TEXTS.getString("strLabelMt1"));
            textFieldDimensions.setText(TEXTS.getString("strTextField1"));
            textFieldDimensions.setToolTipText(TEXTS.getString("strTooltip1"));
        }
        else if (cmbAction.equals("Matrix Multiplication")){
            labelAction2.setText(TEXTS.getString("strLabelMt2"));
            textFieldDimensions.setText(TEXTS.getString("strTextField2"));
            textFieldDimensions.setToolTipText(TEXTS.getString("strTooltip2"));
        }
    }//GEN-LAST:event_cmbBoxActionsItemStateChanged

    private void buttonSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSolveActionPerformed
        ListIterator<NumField> itr1;
        ListIterator<NumField> itr2;
        NumField temp;
        boolean error = false;
        boolean hasSolution = false;
        if(!inputs1.isEmpty()){
            itr1 = inputs1.listIterator();
            while(itr1.hasNext()){
                temp = itr1.next();
                if(!temp.checkValue()) error = true;
            }   
        }  
        if(!inputs2.isEmpty()){
            itr2 = inputs2.listIterator();
            while(itr2.hasNext()){
                temp = itr2.next();
                if(!temp.checkValue()) error = true;
            }
        }
        if(!error){
            //scrPaneOutput.removeAll(); not working - why?
            DisplayHandler displayer = new DisplayHandler();
            try{
                switch(action){
                    case "Equation Solution": solEqSoln(); break;
                    case "Matrix Determinant": {
                        Matrix md = new Matrix(inputs1,dim,dim,type); 
                        md.solveDeterminant();
                        displayer.dispData(md.getData(),md.getDetMsg(),scrPaneOutput);
                        hasSolution = true;
                        break;
                    }
                    case "Matrix Addition":{
                        Matrix md1 = new Matrix(inputs1,dims[0],dims[1],type);
                        Matrix md2 = new Matrix(inputs2,dims[0],dims[1],type);
                        md1.add(md2);
                        //md1.dispDataPlain(scrPaneOutput);
                        displayer.dispData(md1.getData(), scrPaneOutput);
                        hasSolution = true;
                        break;
                    }  
                    case "Matrix Subtraction":{
                        Matrix md1 = new Matrix(inputs1,dims[0],dims[1],type);
                        Matrix md2 = new Matrix(inputs2,dims[0],dims[1],type);
                        md1.sub(md2);
                        //md1.dispDataPlain(scrPaneOutput);
                        displayer.dispData(md1.getData(), scrPaneOutput);
                        hasSolution = true;
                        break;
                    } 
                    case "Scalar Multiplication":{
                        Matrix md = new Matrix(inputs1,dims[0],dims[1],type);
                        md.scMul(new Double(((inputs2.get(0)).getRealField()).getText()));
                        //md.dispDataPlain(scrPaneOutput);
                        displayer.dispData(md.getData(), scrPaneOutput);
                        hasSolution = true;
                        break;
                    }
                    case "Matrix Multiplication": {
                        Matrix md1 = new Matrix(inputs1,dims[0],dims[1],type);
                        Matrix md2 = new Matrix(inputs2,dims[2],dims[3],type);
                        md1.vMul(md2);
                        //md1.dispDataPlain(scrPaneOutput);
                        displayer.dispData(md1.getData(), scrPaneOutput);
                        hasSolution = true;
                        break;
                    }
                    case "Transpose Matrix":{
                        Matrix md = new Matrix(inputs1,dims[0],dims[1],type);
                        md.transpose();
                        //md.dispDataPlain(scrPaneOutput);
                        displayer.dispData(md.getData(), scrPaneOutput);
                        hasSolution = true;
                        break;
                    }
                    default: 
                    diagNs(); 
                    hasSolution = false;
                    break;
                }
            }
            catch(MatrixDeterminantException mde){
                displayer.dispMessage(mde.toString(),scrPaneOutput);
                tabbedPane.setSelectedComponent(panelSolution);
            }
            catch(MatrixOperationException moe){
                displayer.dispMessage(moe.toString(),scrPaneOutput);
                tabbedPane.setSelectedComponent(panelSolution);
            }
            catch (IllegalMatrixMultiplication ex) {
                diag(ex.toString());
            }
            if(hasSolution){
               tabbedPane.setSelectedComponent(panelSolution);
            }
        }
        else if(error) {
            scrPaneOutput.setViewportView(new PanelSpace());
            scrPaneOutput.repaint();
            diag("Inputs Invalid!");
        }
        System.gc(); 
    }//GEN-LAST:event_buttonSolveActionPerformed
    //Custom Functions
    private void solEqSoln(){
            GaussJordan g = new GaussJordan(inputs1,intUnknowns);
            OutputDisplays od;
            g.solve();
            if(g.solnExist()){
                od = new OutputDisplays();
                od.dispSoln1(g.getSoln(),intUnknowns,TypeNumber.Real,scrPaneOutput);
            }
            else {
                diag("No solution.");
            }
    }
    private void diagNs(){
        EmDialog ed = new EmDialog(this,TEXTS.getString("strDiagTitle"),true,TEXTS.getString("strNYS"),this.getCenterPoint());
        //ed.setVisible(rootPaneCheckingEnabled);
    }
    private Point getCenterPoint(){
        int x0 = (this.getLocation()).x;
        int y0 = (this.getLocation()).y;
        int x1 = this.getWidth();
        int y1 = this.getHeight();
        int cx = x1/2 + x0;
        int cy = y1/2 + y0;
        return new Point(cx,cy);
    }
    private void diag(String msg){
//        EmDialog ed = new EmDialog();
//        ed.setMessage(msg);
//        ed.setCenterLocation(this.getCenterPoint());
//        ed.setVisible(true);
        EmDialog ed = new EmDialog(this,TEXTS.getString("strDiagTitle"),true,msg,this.getCenterPoint());
    }
    private void cmbBoxTypeSelectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbBoxTypeSelectItemStateChanged
        // TODO add your handling code here:
        Object ob = evt.getSource();
        javax.swing.JComboBox cmb = (javax.swing.JComboBox) ob;
        String select = (String) cmb.getSelectedItem();
        selectType(select);
        //buttonGo.setAction();
    }//GEN-LAST:event_cmbBoxTypeSelectItemStateChanged

    public void selectType(String str){
        switch(str){
            case "Real": type = TypeNumber.Real; break;
            case "Complex Rectangular": type = TypeNumber.Rect; break;
            case "Complex Polar": type = TypeNumber.Polar; break;
        }
    }
    //Custom Variables
    private TypeNumber type;
    private Integer intUnknowns;
    private Integer dim;
    private int[] dims;
    private String action;
    private final ResourceBundle TEXTS;
    private ArrayList<NumField> inputs1;
    private ArrayList<NumField> inputs2;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonGo;
    private javax.swing.JButton buttonSolve;
    private javax.swing.JComboBox cmbBoxActions;
    private javax.swing.JComboBox cmbBoxTypeSelect;
    private javax.swing.JLabel labelAction2;
    private javax.swing.JLabel labelActions;
    private javax.swing.JPanel panelInput;
    private javax.swing.JPanel panelInputConditions;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelSolution;
    private javax.swing.JScrollPane scrPaneInput;
    private javax.swing.JScrollPane scrPaneOutput;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextField textFieldDimensions;
    // End of variables declaration//GEN-END:variables
}